////////////////////////////////////////////////////////////////////////////////
//
//  Hexadoku - Hexadoku solver.
//
//  Copyright (C) 2015	Bill Farmer
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//  Bill Farmer	 william j farmer [at] yahoo [dot] co [dot] uk.
//
///////////////////////////////////////////////////////////////////////////////

#include <iostream>

#include "Hexadoku.h"
#include "DancingLinks.h"
#include "ResultListener.h"

int main()
{
    // Create an instance.

    Hexadoku dodeka(0);

    // Define some puzzles.

    int puzzle1[PUZZLE_SIDE][PUZZLE_SIDE] =
	{{11, 3, 7,12, -1,15,-1,-1,  2, 6,-1, 0,  8,-1,-1,-1},
	 { 8,-1, 6,-1, -1,11,14,-1, 15,-1,-1, 4,  9, 5,-1,-1},
	 {-1,-1,-1,-1, -1,-1,-1, 0,  5,-1,-1,-1, -1, 2,15,11},
	 {-1, 0,-1, 5, -1,-1,-1,-1, -1,-1, 8,-1, 12,-1,-1, 6},

	 {-1,-1,10, 1, -1, 5,-1,14, -1,15, 4,-1,  7,-1,-1,-1},
	 { 2, 4,-1,-1, 12, 8,-1,-1, -1,-1, 6,10, -1,11,13, 1},
	 {-1,-1,-1,-1,  6,-1, 0,10, -1,12,-1,-1, -1, 4,-1,14},
	 {-1,-1, 3,-1,  4,-1,-1, 2,  9, 0, 5,14,  6,15,-1,-1},

	 {-1,-1, 9, 0, 14, 3, 7,15, 11,-1,-1, 6, -1,13,-1,-1},
	 { 5,-1, 4,-1, -1,-1, 9,-1, 10,14,-1, 8, -1,-1,-1,-1},
	 { 7, 6,12,-1,  2, 0,-1,-1, -1,-1, 3,15, -1,-1,10, 5},
	 {-1,-1,-1, 3, -1,10, 4,-1, 12,-1, 0,-1, 15, 1,-1,-1},

	 { 0,-1,-1, 9, -1,14,-1,-1, -1,-1,-1,-1,  3,-1, 5,-1},
	 { 3,12,13,-1, -1,-1,-1,11, 14,-1,-1,-1, -1,-1,-1,-1},
	 {-1,-1, 1, 7, 15,-1,-1, 8, -1,10, 9,-1, -1,14,-1,12},
	 {-1,-1,-1, 6,  0,-1,12, 3, -1,-1,13,-1, 10, 8, 2,15}};

    int puzzle2[PUZZLE_SIDE][PUZZLE_SIDE] =
	{{10,-1,-1,-1, -1,-1, 4, 5,  8,-1, 6, 2, -1,12, 1, 7},
	 { 4, 3,12,-1, -1,-1,-1,14, -1,11,-1,-1, -1, 0,-1, 6},
	 {-1,-1, 9,15,  1,-1,-1,-1, -1,-1,13,-1,  4,-1,-1,-1},
	 { 2,-1,11,-1, 13,-1,10,12, -1,-1,-1, 1,  8,-1,-1, 9},

	 { 5,-1,-1,14,  8, 1, 3,15, -1, 7,-1,-1, 13,-1,-1,-1},
	 {11, 2,-1,-1, -1,-1,13,-1,  1,-1, 8,-1, -1, 4,15,-1},
	 {-1,-1,-1,-1, -1,-1,-1, 2, -1,-1,-1,-1, -1,-1, 6,-1},
	 {-1,-1,-1,-1,  7,-1,-1, 9, -1,-1, 0,10,  1, 2,-1,-1},

	 {-1,-1, 8,11,  4, 6,-1,-1,  2,-1,-1, 0, -1,-1,-1,-1},
	 {-1, 1,-1,-1, -1,-1,-1,-1,  3,-1,-1,-1, -1,-1,-1,-1},
	 {-1,14, 4,-1, -1,15,-1, 0, -1, 8,-1,-1, -1,-1,12, 1},
	 {-1,-1,-1, 9, -1,-1,11,-1, 10,15, 4, 7,  6,-1,-1, 8},

	 { 1,-1,-1, 3,  6,-1,-1,-1,  7, 2,-1,11, -1, 8,-1,15},
	 {-1,-1,-1, 5, -1, 9,-1,-1, -1,-1,-1, 6,  0, 7,-1,-1},
	 {14,-1, 6,-1, -1,-1,15,-1,  9,-1,-1,-1, -1, 1,10,11},
	 {15, 9,13,-1,  5, 7,-1,11,  4, 3,-1,-1, -1,-1,-1,14}};

    int puzzle3[PUZZLE_SIDE][PUZZLE_SIDE] =
	{{-1, 6,-1, 1, -1,-1,-1,-1, 11,-1,-1, 2, -1, 4,-1,-1},
	 { 0,-1,-1,-1,  3,-1,14,10, -1,13,-1,-1, -1,12,-1,-1},
	 { 5,-1,-1,-1,  8,-1,-1,-1, -1,-1,-1,-1, -1,-1, 7,13},
	 {-1, 2, 9,-1, -1,-1,-1, 0, -1,-1, 6,-1, -1,-1,-1, 1},

	 {-1, 9,-1,-1, 11,-1,-1, 3,  5,-1,-1,-1, -1,-1, 1,-1},
	 { 4,12, 7,10, 13,-1,-1,14, -1, 3,-1,-1, -1,-1,-1, 9},
	 { 3,14, 1,-1, -1, 8,-1,12, 13,-1, 2,-1,  4,-1,-1, 7},
	 {-1,15,-1, 8,  5,-1, 0,-1, -1,-1,-1,-1, -1,-1,-1,-1},

	 {-1,-1,-1,-1, -1,-1,13,-1, -1,-1,-1, 6, -1,-1, 0, 8},
	 {-1, 8,15,-1, 14, 4,-1, 6, -1,-1, 3, 9, -1,-1,-1,-1},
	 {-1,-1,-1, 7,  1,-1,-1,-1, 15,14,-1,13, -1,-1,-1,12},
	 { 6,-1,-1,-1, -1, 0,12,-1,  2, 4, 5,-1, -1,-1,14, 3},

	 {-1,-1,-1,-1, -1,12,-1, 1, 10,-1,-1,-1, -1,-1, 2,-1},
	 {13,-1,-1,-1, -1,-1, 3, 9, -1,-1,11,-1, -1, 1,-1,-1},
	 {-1, 4,-1, 6, 10,-1,-1,-1, 14, 5, 1,-1, -1,-1, 3,-1},
	 {15,-1,10,12,  6,-1,11, 7, -1, 9,-1,-1, -1,-1,-1, 0}};

    int puzzle4[PUZZLE_SIDE][PUZZLE_SIDE] =
	{{-1,-1,-1,10, -1, 0, 5, 7, -1,-1,-1, 9, -1,-1,11, 2},
	 { 4,-1,-1,-1, -1, 2,-1,14, -1,-1,12,-1, 10, 6, 0, 1},
	 {-1,-1, 3,-1, -1,-1,-1,-1, -1, 6,11, 1, -1,-1,-1,-1},
	 { 6,-1,-1,-1, 11,-1,-1,-1, -1,-1, 0,-1,  7, 9,-1,14},
	 
	 {11,-1,-1,14, -1,-1,-1,-1, 12, 9,-1,-1,  0,-1,-1,-1},
	 {-1, 2, 6,-1, 13,-1,-1, 9, 11, 4,-1,-1, -1,-1,10,-1},
	 { 3, 4,13, 8, -1,-1,11,-1, 14,-1, 1,-1, -1,-1,-1,-1},
	 {-1,10,-1, 5, -1,-1,-1, 6, -1,-1,-1, 0, -1,-1,-1,-1},
	 
	 {14,-1, 2, 6,  3,-1,-1,-1, -1,-1,15,11, -1,-1,-1,10},
	 {-1,-1,-1,15,  8,-1,12, 2, -1, 0,-1,-1,  3, 4,-1,-1},
	 {-1, 8,-1,-1,  4,-1,-1,-1,  9,-1, 3,-1, 12,-1, 2,15},
	 {13,-1,-1,-1,  7,-1,15,-1, -1,-1,-1,-1,  8,-1,-1,-1},
	 
	 {-1,-1, 9, 1,  0,-1,-1,-1, -1,-1, 7,-1, 11,-1, 5,13},
	 { 5,-1,-1,12, -1,15,-1,-1, -1,-1,-1,-1,  4,10,-1,-1},
	 {-1,15,-1,11, -1, 3, 4,-1, 13,10, 6,12, -1,-1,-1, 9},
	 {-1,13,-1,-1, -1,-1,-1,12, -1, 5,-1,14, -1,-1,-1,-1}};

    // Solve them.

    dodeka.solve(puzzle1);
    dodeka.solve(puzzle2);
    dodeka.solve(puzzle3);
    dodeka.solve(puzzle4);
}

///////////////////////////////////////////////////////////////////////////////
//
//   Class Hexadoku defines some puzzles from the Times or Sunday Times
//   and solves them.
//
///////////////////////////////////////////////////////////////////////////////

// Solve a puzzle.

void Hexadoku::solve(int puzzle[PUZZLE_SIDE][PUZZLE_SIDE])
{
    // Create a new Dancing Links.

    DancingLinks dl(puzzle);

    // Set the listener

    dl.setListener(this);

    // Solve the puzzle.

    dl.solve();
}

// Print the solution.

void Hexadoku::onResult(int solution[PUZZLE_SIDE][PUZZLE_SIDE])
{
    for (int r = 0; r < PUZZLE_SIDE; r++)
    {
	for (int c = 0; c < PUZZLE_SIDE; c++)
	    std::cout << std::uppercase << std::hex << solution[r][c] << " ";

	std::cout << "\n";
    }

    std::cout << "-------------------------------\n";
}
